import HelperAsset from './HelperAsset.js';
import HelperTags from './HelperTags.js';
import * as EditorCondition from './EditorCondition.js';
import * as EditorAction from './EditorAction.js';
import ActionLearnable from '../../classes/ActionLearnable.js';
import Generic from '../../classes/helpers/Generic.js';


const DB = 'actionLearnable',
	CONSTRUCTOR = ActionLearnable;

// Single asset editor
export function asset(){

	const 
		modtools = window.mod,
		id = this.id,
		asset = modtools.mod.getAssetById(DB, id),
		dummy = CONSTRUCTOR.loadThis(asset)
	;

	if( !asset )
		return this.close();

	let html = '';

	html += '<div class="labelFlex">';
		if( !asset._h && !asset._mParent )
			html += '<label>Label: <input type="text" name="label" class="saveable" value="'+esc(dummy.label)+'" /></label>';
		html += '<label title="Cost in copper, -1 auto generates">Cost: <input name="cost" value="'+esc(dummy.cost)+'" type="number" step=1 min=-1 class="saveable" /></label>';
		html += '<label>Auto learn: <input name="auto_learn" '+(dummy.auto_learn ? 'checked' : '')+' class="saveable" type="checkbox" /></label>';
		html += '<label title="Only available to monsters generated by PlayerTemplate">Player templates only: <input name="gen_only" '+(dummy.gen_only ? 'checked' : '')+' class="saveable" type="checkbox" /></label>';
	html += '</div>';

	html += 'Action: <br /><div class="actionPicker"></div>';
	html += 'Conditions: <br /><div class="conditions"></div>';
	
	this.setDom(html);


	// Bind stuff

	// Action
	this.dom.querySelector("div.actionPicker").appendChild(EditorAction.assetTable(this, asset, "action", true));

	// conditions
	this.dom.querySelector("div.conditions").appendChild(EditorCondition.assetTable(this, asset, "conditions"));


	HelperAsset.autoBind( this, asset, DB);

};


// Creates a table for this asset in another asset
export function assetTable( win, modAsset, name, single ){
	return HelperAsset.linkedTable( win, modAsset, name, CONSTRUCTOR, DB, ['label', 'action'], single);
}



// Listing
export function list(){

	this.setDom(HelperAsset.buildList(this, DB, CONSTRUCTOR, {
		['*label'] : true,
		['*action'] : true,
		auto_learn : true,
		cost : true,
		['*conditions'] : true,
		['*gen_only'] : true,
	}));

	HelperAsset.bindList(this, DB, new CONSTRUCTOR({
		label : 'action_'+Generic.generateUUID(),
		action : 'lowBlow',
		auto_learn : false,
	}));

};

// Returns a help text
export function help(){

	let out = '';

	out += '<h3>Player Action:</h3>'+
		'<p>This table is used to figure out which NPCs can use what abilities, and what trainers the players can learn new actions at, and actions auto learned by players.</p>';

	out += '<h3>Fields</h3>';
	out += '<table>';
	out += 
		'<tr>'+
			'<td>Label</td>'+
			'<td>A unique label to access the asset by. WARNING: DO NOT CHANGE AFTER SETTING IT, OR RISK BROKEN LINKS!</td>'+
		'</tr>'+ 
		'<tr>'+
			'<td>Cost</td>'+
			'<td>Lets you set a cost in copper to train this ability. Use -1 for automatic.</td>'+
		'</tr>'+
		'<tr>'+
			'<td>Auto Learn</td>'+
			'<td>Can be used to auto learn the action whenever conditions are met. This is checked whenever a player levels up.</td>'+
		'</tr>'+
		'<tr>'+
			'<td>Player templates only</td>'+
			'<td>Makes this action only available to NPCs.</td>'+
		'</tr>'+
		'<tr>'+
			'<td>Action</td>'+
			'<td>The action to learn.</td>'+
		'</tr>'+
		'<tr>'+
			'<td>Conditions</td>'+
			'<td>Conditions needed to be met to learn it. For gyms, use one of the gameActionTag conditions. To mark a gym as a type, add a tag (such as ga_warrior) to the game action that links the NPC with the gym.</td>'+
		'</tr>'
	;
		

	out += '</table>';

	

	return out;

};

