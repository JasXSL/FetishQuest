/*global ArrayBuffer, Uint8Array, window, XMLHttpRequest*/
var reverbjs = {
	extend : function (audioContext) {

		function decodeAndSetupBuffer(node, arrayBuffer, callback) {
			audioContext.decodeAudioData(
				arrayBuffer, 
				function (audioBuffer) {
					node.buffer = audioBuffer;
					if (typeof callback === "function" && audioBuffer !== null) {
						callback(node);
					}
				}, 
				function (e) {
				console.log('Could not decode audio data: ' + e);
				}
			);
		}
	
	
		audioContext.createReverbFromUrl = function (audioUrl, callback) {
			var reverbNode = audioContext.createConvolver(),
				request = new XMLHttpRequest()
			;
			request.open('GET', audioUrl, true);
			request.onreadystatechange = function () {
				if (request.readyState === 4 && request.status === 200) {
					decodeAndSetupBuffer(reverbNode, request.response, callback);
				}
			};
			request.onerror = function (e) {
				console.log('There was an error receiving the response: ' + e);
				reverbjs.networkError = e;
			};
			request.responseType = 'arraybuffer';
			request.send();
			return reverbNode;
		};
	
	}
};
export default reverbjs;